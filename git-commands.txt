git config --global user.name "iameprel"
git config --global user.email "iameprel@am.com"


create repo
 note a repo has three stages : modified | staged | commited

on project folder type

git init

check status
git status

stage a file
git add index.html

stage all modified files
git add .
or
git add -A

remove a currently staged file
git rm --cached index.html or {filename.ext}

remove all files tha are staged
git rm --cached -r .

commit changes
git commit -m "changed body font size"

note: -m stands for message and message must be inside double qoutes

show all commits
git log

show all commits in short simple form
git log --oneline

will return
Î» git log --oneline
b5ed4a0 (HEAD -> master) added h1
67d7a40 added js file
0d5501d added log --oneline command reference to commands text file
de7b64d added commit command reference to git-commands text file
17c8a77 changed body font size
ebd52f2 added index title
69f4771 added index and styles. my first commit

go back to a particular commit via git checkout
git checkout ebd52f2

note: ebd52f2 is the commit id returned from git log --oneline

you can go back to the most latest branch commit using:
git check out master

if you want to undo or remove all changes made from a particular commit,
you can use
git revert {commitid}
then type :wq and enter

e.g. git revert b5ed4a0
which was "added h1"
this will create a new commit and make it as the HEAD of the branch
and it will not include or will undo all the changes made
from "added h1" or b5ed4a0 commit

you still have access to b5ed4a0 commit but git revert command will
not include changes made to that branch on the created commit with git revert

meaning, git revert and git reset is never recommended
it will only confuse you in the process

but okay, incase you really wanted to reset to a particular commit
you want to go to, then you can do;
git reset {commitid}

though you will not be able to access anything after the commit you selected,
remember that the reset command will get you back in time to a particular commit
you want to got to but it will not change anything in your working directory,
not yet, until you include the --hard flag
meaning you can still see the latest changes you've made in your editor and you
may still change your mind by re-adding it to staging and commit them again

well to satisfy your curiosity, here is the reset command that will permanently
make your repo and working directory go to a particular commit.
note that by passing the --hard flag, it's not gonna retain any kind of changes
from the commit afterwards and in the editor as well.
git reset {commitid} --hard

warning: do not use this unless you are really really really sure that you need it.

// BRANCHES | BRANCHING
now if you want to create a feature but do not want to mess up the master branch,
and then when you are happy with the feature you created and everybody thinks
that it does not messes up the master branch's code, you can merge it back to
master branch. To create a branch, just type;
git branch {nameofbranch}
example:
git branch feature-1

show all the branches
git branch -a

delete a branch
git branch -D feature-1

small caps -d flag will only work once you've merged the branch

to create a branch and check it out as well, use;
git checkout -b feature-2


MERGING branch | branches to master branch
first you have to be in the branch you wanna merge into
normally, the master branch
to merge a branch into the master branch, type;
git merge {nameofbranch-to-merge-in}

git merge feature-1

Note: If while merging, you encounter a CONFLICT error
you just have to edit the conflicting files manually
to satisfy the teams needs and then issue;
git commit
then type :wq and enter

GITHUB

push code to github
git push https://github.com/silverstory/git-one.git master

assign and use an alias so that you will not type
the long url again and again.
git remote add origin {git repo url}
or
git remote add origin https://github.com/silverstory/git-one.git

now push it with
git push origin {branch name}
or
git push origin master

